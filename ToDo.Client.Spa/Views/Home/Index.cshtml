@{
    ViewData["Title"] = "ToDo";
}
<!--
<div class="row">
    <div class="col-md-6">
        <div class="todolist not-done">
            <h1>Todos</h1>
            <input type="text" class="form-control add-todo" placeholder="Add todo">
            @*<button id="checkAll" class="btn btn-success">Mark all as done</button>*@
            <hr>
            <ul id="sortable" class="list-unstyled"></ul>
        </div>
    </div>
</div>

<style>
    body {
        background-color: #EEEEEE;
    }

    .todolist {
        background-color: #FFF;
        padding: 20px 20px 10px 20px;
        margin-top: 30px;
    }

        .todolist h1 {
            margin: 0;
            padding-bottom: 20px;
            text-align: center;
        }

    .form-control {
        border-radius: 0;
    }

    li.ui-state-default {
        background: #fff;
        border: none;
        border-bottom: 1px solid #ddd;
    }

        li.ui-state-default:last-child {
            border-bottom: none;
        }

    .todo-footer {
        background-color: #F4FCE8;
        margin: 0 -20px -10px -20px;
        padding: 10px 20px;
    }

    #done-items li {
        padding: 10px 0;
        border-bottom: 1px solid #ddd;
        text-decoration: line-through;
    }

        #done-items li:last-child {
            border-bottom: none;
        }

    #checkAll {
        margin-top: 10px;
    }
</style>
<script type="text/javascript">$("#sortable").sortable();
    $("#sortable").disableSelection();
    const msalConfig = {
        //popUp: true,
        auth: {
            clientId: "b2027100-cc3f-4f65-8879-8aa29bff9204",
            authority: "https://login.microsoftonline.com/7ad4009f-0ead-4576-81ba-3ad93dccbc9f",
            validateAuthority: false,
            redirectUri: "https://localhost:5002",
        },
        cache: {
            cacheLocation: "localStorage",
            storeAuthStateInCookie: true
        }
    };
    clientApplication = new Msal.UserAgentApplication(msalConfig);

    var request = {
        scopes: ['api://61c387ae-7147-4642-8deb-f2b13f88f0e2/.default']
    }

    getAllTodo();

    $("#checkAll").click(function () {
        AllDone();
    });

    function isReLoginError(err) {
        return (err.name === "InteractionRequiredAuthError" || err.errorCode == "login_required" || err.errorCode == "consent_required");
    }

    function getAllTodo() {
        clientApplication.acquireTokenSilent(request)
            .then(function (response) {
                fetchAllTodo(response.accessToken);
                countTodos();
            })
            .catch(err => {
                if (isReLoginError(err)) {
                    clientApplication.acquireTokenPopup(request).then(
                        function (response) {
                            fetchAllTodo(response.accessToken);
                            countTodos();
                        }).catch(function (error) {
                            console.log(error);
                        });
                } else {
                    console.log(err.errorMessage);
                    clientApplication.loginPopup().then(function (token) {
                        console.log(token);
                    });
                }
            });
    }

    //create todo
    $('.add-todo').on('keypress', function (e) {
        e.preventDefault
        if (e.which == 13) {
            if ($(this).val() != '') {
                var todo = $(this).val();

                //clientApplication.loginPopup().then(function (token) {
                //    console.log(token);

                //});
                clientApplication.acquireTokenSilent(request)
                    .then(function (response) {
                        console.log(response);
                        createTodo(todo, response.accessToken);
                        countTodos();
                    })
                    .catch(err => {
                        if (isReLoginError(err)) {
                            clientApplication.acquireTokenPopup(request).then(
                                function (response) {
                                    createTodo(todo, response.accessToken);
                                    countTodos();
                                }).catch(function (error) {
                                    console.log(error);
                                });
                        } else {
                            //onAccessToken(err.name, null, err.errorMessage)
                            console.log(err.errorMessage);
                            clientApplication.loginPopup().then(function (token) {
                                console.log(token);
                            });
                        }
                    });

            } else {
                // some validation
            }
        }
    });
    // mark task as done
    $('.todolist').on('change', '#sortable li input[type="checkbox"]', function () {
        if ($(this).prop('checked')) {
            var doneItem = $(this).parent().parent().find('label').text();
            var id = $(this).data('id');

            clientApplication.acquireTokenSilent(request)
                .then(function (response) {
                    deleteTodo(id, doneItem, response.accessToken);
                    countTodos();
                })
                .catch(err => {
                    if (isReLoginError(err)) {
                        clientApplication.acquireTokenPopup(request).then(
                            function (response) {
                                deleteTodo(id, doneItem, response.accessToken);
                                countTodos();
                            }).catch(function (error) {
                                console.log(error);
                            });
                    } else {
                        //onAccessToken(err.name, null, err.errorMessage)
                        console.log(err.errorMessage);
                        clientApplication.loginPopup().then(function (token) {
                            console.log(token);
                        });
                    }
                });

            $(this).parent().parent().parent().addClass('remove');
        }
    });

    //delete done task from "already done"
    $('.todolist').on('click', '.remove-item', function () {
        removeItem(this);
    });

    // count tasks
    function countTodos() {
        var count = $("#sortable li").length;
        $('.count-todos').html(count);
    }


    function createTodo(todo, accessToken) {
        $.ajax({
            url: "https://localhost:5001/api/todo",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + accessToken,
            },
            type: "POST",
            data: JSON.stringify({
                content: todo
            }),
            dataType: 'json',
            success: function (data, textStatus, jqXHR) {
                var markup = `<li class="ui-state-default"><div class="checkbox"><label><input type="checkbox" value="" data-id="${data.id}" />${data.content}</label></div></li>`;
                $('#sortable').append(markup);
                $('.add-todo').val('');
            },
            error: function (jqXHR, textStatus, errorThrown) {

            }
        });
    }

    function fetchAllTodo(accessToken) {
        $.ajax({
            url: "https://localhost:5001/api/todo",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + accessToken,
            },
            type: "GET",
            dataType: 'json',
            success: function (data, textStatus, jqXHR) {
                for (var i = 0; i < data.length; i++) {
                    var markup = `<li class="ui-state-default"><div class="checkbox"><label><input type="checkbox" value="" data-id="${data[i].id}" />${data[i].content}</label></div></li>`;
                    $('#sortable').append(markup);
                    $('.add-todo').val('');
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {

            }
        });
    }

    function deleteTodo(id, doneItem, accessToken) {
        $.ajax({
            url: `https://localhost:5001/api/todo/${id}`,
            headers: {
                //'Accept': 'application/json',
                //'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + accessToken,
            },
            type: "DELETE",
            //dataType: 'json',
            success: function () {
                done(doneItem);
                countTodos();
            },
            error: function () {

            }
        });
    }

    //mark task as done
    function done(doneItem) {
        var done = doneItem;
        var markup = '<li>' + done + '<button class="btn btn-default btn-xs pull-right  remove-item"><span class="glyphicon glyphicon-remove"></span></button></li>';
        $('#done-items').append(markup);
        $('.remove').remove();
    }

    //mark all tasks as done
    function AllDone() {
        var todoes = [];

        $('#sortable li').each(function () {
            todoes.push($(this).text());
        });

        // add to done
        for (i = 0; i < todoes.length; i++) {
            $('#done-items').append('<li>' + todoes[i] + '<button class="btn btn-default btn-xs pull-right  remove-item"><span class="glyphicon glyphicon-remove"></span></button></li>');
        }

        // myArray
        $('#sortable li').remove();
        countTodos();
    }

    //remove done task from list
    function removeItem(element) {
        $(element).parent().remove();
    }</script>

    -->

<h1>Todos</h1>

<form class="add-items">
    <input type="text" class="form-control" id="todo-list-item" placeholder="What do you need to do today?">
    <button class="add" type="submit">Add to List</button>
</form>
<ul id="list-items"></ul>