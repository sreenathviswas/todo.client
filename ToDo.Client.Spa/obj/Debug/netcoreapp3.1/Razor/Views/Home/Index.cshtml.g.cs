#pragma checksum "/Users/sreenath/Projects/ireland/todo/todo.client/ToDo.Client.Spa/Views/Home/Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "30d93d399efd907d409a13d2582489b346c37664"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/Users/sreenath/Projects/ireland/todo/todo.client/ToDo.Client.Spa/Views/_ViewImports.cshtml"
using ToDo.Client.Spa;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/sreenath/Projects/ireland/todo/todo.client/ToDo.Client.Spa/Views/_ViewImports.cshtml"
using ToDo.Client.Spa.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"30d93d399efd907d409a13d2582489b346c37664", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a49927e88b872a4ee92691cf893486e6ca4d81ed", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("add-items"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "/Users/sreenath/Projects/ireland/todo/todo.client/ToDo.Client.Spa/Views/Home/Index.cshtml"
  
    ViewData["Title"] = "ToDo";

#line default
#line hidden
#nullable disable
            WriteLiteral("<!--\r\n<div class=\"row\">\r\n    <div class=\"col-md-6\">\r\n        <div class=\"todolist not-done\">\r\n            <h1>Todos</h1>\r\n            <input type=\"text\" class=\"form-control add-todo\" placeholder=\"Add todo\">\r\n");
            WriteLiteral(@"            <hr>
            <ul id=""sortable"" class=""list-unstyled""></ul>
        </div>
    </div>
</div>

<style>
    body {
        background-color: #EEEEEE;
    }

    .todolist {
        background-color: #FFF;
        padding: 20px 20px 10px 20px;
        margin-top: 30px;
    }

        .todolist h1 {
            margin: 0;
            padding-bottom: 20px;
            text-align: center;
        }

    .form-control {
        border-radius: 0;
    }

    li.ui-state-default {
        background: #fff;
        border: none;
        border-bottom: 1px solid #ddd;
    }

        li.ui-state-default:last-child {
            border-bottom: none;
        }

    .todo-footer {
        background-color: #F4FCE8;
        margin: 0 -20px -10px -20px;
        padding: 10px 20px;
    }

    #done-items li {
        padding: 10px 0;
        border-bottom: 1px solid #ddd;
        text-decoration: line-through;
    }

        #done-items li:last-child {
           ");
            WriteLiteral(@" border-bottom: none;
        }

    #checkAll {
        margin-top: 10px;
    }
</style>
<script type=""text/javascript"">$(""#sortable"").sortable();
    $(""#sortable"").disableSelection();
    const msalConfig = {
        //popUp: true,
        auth: {
            clientId: ""b2027100-cc3f-4f65-8879-8aa29bff9204"",
            authority: ""https://login.microsoftonline.com/7ad4009f-0ead-4576-81ba-3ad93dccbc9f"",
            validateAuthority: false,
            redirectUri: ""https://localhost:5002"",
        },
        cache: {
            cacheLocation: ""localStorage"",
            storeAuthStateInCookie: true
        }
    };
    clientApplication = new Msal.UserAgentApplication(msalConfig);

    var request = {
        scopes: ['api://61c387ae-7147-4642-8deb-f2b13f88f0e2/.default']
    }

    getAllTodo();

    $(""#checkAll"").click(function () {
        AllDone();
    });

    function isReLoginError(err) {
        return (err.name === ""InteractionRequiredAuthError"" || err.errorC");
            WriteLiteral(@"ode == ""login_required"" || err.errorCode == ""consent_required"");
    }

    function getAllTodo() {
        clientApplication.acquireTokenSilent(request)
            .then(function (response) {
                fetchAllTodo(response.accessToken);
                countTodos();
            })
            .catch(err => {
                if (isReLoginError(err)) {
                    clientApplication.acquireTokenPopup(request).then(
                        function (response) {
                            fetchAllTodo(response.accessToken);
                            countTodos();
                        }).catch(function (error) {
                            console.log(error);
                        });
                } else {
                    console.log(err.errorMessage);
                    clientApplication.loginPopup().then(function (token) {
                        console.log(token);
                    });
                }
            });
    }

    //create todo
    $");
            WriteLiteral(@"('.add-todo').on('keypress', function (e) {
        e.preventDefault
        if (e.which == 13) {
            if ($(this).val() != '') {
                var todo = $(this).val();

                //clientApplication.loginPopup().then(function (token) {
                //    console.log(token);

                //});
                clientApplication.acquireTokenSilent(request)
                    .then(function (response) {
                        console.log(response);
                        createTodo(todo, response.accessToken);
                        countTodos();
                    })
                    .catch(err => {
                        if (isReLoginError(err)) {
                            clientApplication.acquireTokenPopup(request).then(
                                function (response) {
                                    createTodo(todo, response.accessToken);
                                    countTodos();
                                }).catch(function (error");
            WriteLiteral(@") {
                                    console.log(error);
                                });
                        } else {
                            //onAccessToken(err.name, null, err.errorMessage)
                            console.log(err.errorMessage);
                            clientApplication.loginPopup().then(function (token) {
                                console.log(token);
                            });
                        }
                    });

            } else {
                // some validation
            }
        }
    });
    // mark task as done
    $('.todolist').on('change', '#sortable li input[type=""checkbox""]', function () {
        if ($(this).prop('checked')) {
            var doneItem = $(this).parent().parent().find('label').text();
            var id = $(this).data('id');

            clientApplication.acquireTokenSilent(request)
                .then(function (response) {
                    deleteTodo(id, doneItem, response.acces");
            WriteLiteral(@"sToken);
                    countTodos();
                })
                .catch(err => {
                    if (isReLoginError(err)) {
                        clientApplication.acquireTokenPopup(request).then(
                            function (response) {
                                deleteTodo(id, doneItem, response.accessToken);
                                countTodos();
                            }).catch(function (error) {
                                console.log(error);
                            });
                    } else {
                        //onAccessToken(err.name, null, err.errorMessage)
                        console.log(err.errorMessage);
                        clientApplication.loginPopup().then(function (token) {
                            console.log(token);
                        });
                    }
                });

            $(this).parent().parent().parent().addClass('remove');
        }
    });

    //delete done task fr");
            WriteLiteral(@"om ""already done""
    $('.todolist').on('click', '.remove-item', function () {
        removeItem(this);
    });

    // count tasks
    function countTodos() {
        var count = $(""#sortable li"").length;
        $('.count-todos').html(count);
    }


    function createTodo(todo, accessToken) {
        $.ajax({
            url: ""https://localhost:5001/api/todo"",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + accessToken,
            },
            type: ""POST"",
            data: JSON.stringify({
                content: todo
            }),
            dataType: 'json',
            success: function (data, textStatus, jqXHR) {
                var markup = `<li class=""ui-state-default""><div class=""checkbox""><label><input type=""checkbox"" value="""" data-id=""${data.id}"" />${data.content}</label></div></li>`;
                $('#sortable').append(markup);
            ");
            WriteLiteral(@"    $('.add-todo').val('');
            },
            error: function (jqXHR, textStatus, errorThrown) {

            }
        });
    }

    function fetchAllTodo(accessToken) {
        $.ajax({
            url: ""https://localhost:5001/api/todo"",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + accessToken,
            },
            type: ""GET"",
            dataType: 'json',
            success: function (data, textStatus, jqXHR) {
                for (var i = 0; i < data.length; i++) {
                    var markup = `<li class=""ui-state-default""><div class=""checkbox""><label><input type=""checkbox"" value="""" data-id=""${data[i].id}"" />${data[i].content}</label></div></li>`;
                    $('#sortable').append(markup);
                    $('.add-todo').val('');
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {

  ");
            WriteLiteral(@"          }
        });
    }

    function deleteTodo(id, doneItem, accessToken) {
        $.ajax({
            url: `https://localhost:5001/api/todo/${id}`,
            headers: {
                //'Accept': 'application/json',
                //'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + accessToken,
            },
            type: ""DELETE"",
            //dataType: 'json',
            success: function () {
                done(doneItem);
                countTodos();
            },
            error: function () {

            }
        });
    }

    //mark task as done
    function done(doneItem) {
        var done = doneItem;
        var markup = '<li>' + done + '<button class=""btn btn-default btn-xs pull-right  remove-item""><span class=""glyphicon glyphicon-remove""></span></button></li>';
        $('#done-items').append(markup);
        $('.remove').remove();
    }

    //mark all tasks as done
    function AllDone() {
        var ");
            WriteLiteral(@"todoes = [];

        $('#sortable li').each(function () {
            todoes.push($(this).text());
        });

        // add to done
        for (i = 0; i < todoes.length; i++) {
            $('#done-items').append('<li>' + todoes[i] + '<button class=""btn btn-default btn-xs pull-right  remove-item""><span class=""glyphicon glyphicon-remove""></span></button></li>');
        }

        // myArray
        $('#sortable li').remove();
        countTodos();
    }

    //remove done task from list
    function removeItem(element) {
        $(element).parent().remove();
    }</script>

    -->

<h1>Todos</h1>

");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "30d93d399efd907d409a13d2582489b346c3766414208", async() => {
                WriteLiteral("\r\n    <input type=\"text\" class=\"form-control\" id=\"todo-list-item\" placeholder=\"What do you need to do today?\">\r\n    <button class=\"add\" type=\"submit\">Add to List</button>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<ul id=\"list-items\"></ul>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
